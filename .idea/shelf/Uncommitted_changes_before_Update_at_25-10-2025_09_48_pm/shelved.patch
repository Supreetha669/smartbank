Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pymysql\r\nconn = pymysql.connect(host='localhost', user='bankuser', password='password123', database='bankdb')\r\nprint(\"Connected successfully\")\r\nconn.close()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
--- a/test.py	(revision 697c6df90b99385a8689d54a16680b264e1072f9)
+++ b/test.py	(date 1761393604726)
@@ -1,4 +1,4 @@
 import pymysql
 conn = pymysql.connect(host='localhost', user='bankuser', password='password123', database='bankdb')
 print("Connected successfully")
-conn.close()
\ No newline at end of file
+conn.close()
Index: tests/test_main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tests/test_main.py b/tests/test_main.py
new file mode 100644
--- /dev/null	(date 1761394601579)
+++ b/tests/test_main.py	(date 1761394601579)
@@ -0,0 +1,46 @@
+import pytest
+from fastapi.testclient import TestClient
+from main import app
+from database import Base, engine, SessionLocal
+from models import User, Account
+
+client = TestClient(app)
+
+# Use a separate test database
+SQLALCHEMY_DATABASE_URL = "mysql+pymysql://bankuser:password123@localhost:3306/smartbankdb"
+
+@pytest.fixture(scope="module")
+def db_setup():
+    Base.metadata.create_all(bind=engine)
+    db = SessionLocal()
+    yield db
+    db.close()
+    Base.metadata.drop_all(bind=engine)
+
+def test_register_user(db_setup):
+    response = client.post(
+        "/user/register",
+        json={"username": "testuser", "email": "testuser@example.com", "password": "secure123"}
+    )
+    assert response.status_code == 200
+    data = response.json()
+    assert "user_id" in data
+    assert data["message"] == "User registered successfully"
+
+def test_create_account(db_setup):
+    # First, register a new user
+    response_user = client.post(
+        "/user/register",
+        json={"username": "accountuser", "email": "accountuser@example.com", "password": "secure123"}
+    )
+    user_id = response_user.json()["user_id"]
+
+    # Now create account
+    response_account = client.post(
+        "/account/create",
+        json={"user_id": user_id, "account_type": "Savings", "initial_deposit": 2000}
+    )
+    data = response_account.json()
+    assert response_account.status_code == 200
+    assert "account_number" in data
+    assert data["message"] == "Account created successfully"
